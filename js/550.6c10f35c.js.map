{"version":3,"file":"js/550.6c10f35c.js","mappings":"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","sources":["webpack://tracker/./src/stores/exercise.js","webpack://tracker/./src/stores/runRecorder.js","webpack://tracker/./src/components/record-new/RunRecorder.vue","webpack://tracker/./src/components/record-new/RunRecorder.vue?a91a","webpack://tracker/./src/components/record-new/ScoringRulesDialog.vue","webpack://tracker/./src/components/record-new/ScoringRulesDialog.vue?7b37","webpack://tracker/./src/components/record-new/RunSummary.vue","webpack://tracker/./src/components/record-new/RunSummary.vue?c3aa","webpack://tracker/./src/views/RecordNew.vue","webpack://tracker/./src/views/RecordNew.vue?71d2"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport { reactive, ref, computed } from \"vue\";\r\nimport { supabase } from \"./supabase.js\";\r\nexport const useExerciseStore = defineStore(\"exercise\", () => {\r\n  const exerciseGroupData = reactive({\r\n    list: [\r\n      {\r\n        name: \"All\",\r\n        id: 0,\r\n      },\r\n    ],\r\n    loading: true,\r\n  });\r\n\r\n  const allExercises = ref([]);\r\n\r\n  const newRunRecording = reactive({\r\n    group_id: null,\r\n    exercises: [],\r\n  });\r\n\r\n  const getExerciseGroups = async () => {\r\n    const { data: groupData } = await supabase\r\n      .from(\"exercise_groups\")\r\n      .select(\"*\");\r\n\r\n    if (groupData) {\r\n      const allOption = { id: 0, name: \"All\" };\r\n\r\n      const sorted = [allOption, ...groupData].sort((a, b) => a.id - b.id);\r\n\r\n      exerciseGroupData.list = sorted;\r\n      exerciseGroupData.loading = false;\r\n    }\r\n  };\r\n\r\n  const createSelectableGroupsForNewRun = computed(() => {\r\n    return exerciseGroupData.list.filter((l) => {\r\n      return l.id != 0;\r\n    });\r\n  });\r\n\r\n  const getAllExercises = async () => {\r\n    const { data } = await supabase\r\n      .from(\"exercises\")\r\n      .select(\"*\")\r\n      .order(\"group_id\")\r\n      .order(\"ordering\");\r\n    if (data) {\r\n      allExercises.value = data;\r\n    }\r\n  };\r\n\r\n  return {\r\n    exerciseGroupData,\r\n    createSelectableGroupsForNewRun,\r\n    allExercises,\r\n    newRunRecording,\r\n    //functions\r\n    getExerciseGroups,\r\n    getAllExercises,\r\n  };\r\n});\r\n","import { defineStore } from \"pinia\";\r\nimport { ref, computed } from \"vue\";\r\nimport { useExerciseStore } from \"./exercise\";\r\nimport { supabase } from \"./supabase\";\r\nimport { useUserStore } from \"./userData\";\r\n\r\nexport const useRunRecorderStore = defineStore(\"runRecorder\", () => {\r\n  const exerciseStore = useExerciseStore();\r\n\r\n  const groupId = ref(null);\r\n  const currentIndex = ref(0);\r\n  const results = ref([]);\r\n\r\n  const exercises = computed(() =>\r\n    exerciseStore.allExercises.filter((e) => e.group_id === groupId.value)\r\n  );\r\n\r\n  const currentExercise = computed(() => exercises.value[currentIndex.value]);\r\n\r\n  const setGroupId = (id) => {\r\n    groupId.value = id;\r\n    currentIndex.value = 0;\r\n    results.value = [];\r\n  };\r\n\r\n  const saveResult = (score, time_taken) => {\r\n    results.value[currentIndex.value] = {\r\n      exercise_id: currentExercise.value.id,\r\n      score: parseFloat(score),\r\n      time_taken: parseFloat(time_taken),\r\n    };\r\n  };\r\n\r\n  const goNext = () => {\r\n    if (currentIndex.value < exercises.value.length - 1) {\r\n      currentIndex.value++;\r\n    }\r\n  };\r\n\r\n  const goBack = () => {\r\n    if (currentIndex.value > 0) {\r\n      currentIndex.value--;\r\n    }\r\n  };\r\n\r\n  const cancelRun = () => {\r\n    groupId.value = null;\r\n    currentIndex.value = 0;\r\n    results.value = [];\r\n  };\r\n\r\n  const submitRun = async () => {\r\n    const userStore = useUserStore();\r\n    if (\r\n      !userStore.userData.alt ||\r\n      !groupId.value ||\r\n      results.value.length === 0\r\n    ) {\r\n      throw new Error(\"Missing required data to submit run.\");\r\n    }\r\n\r\n    const { error } = await supabase.rpc(\"submit_run_transaction\", {\r\n      p_alt_user_id: userStore.userData.alt,\r\n      p_group_id: groupId.value,\r\n      p_results: results.value,\r\n    });\r\n\r\n    if (error) {\r\n      throw new Error(\"Failed to submit run transactionally.\");\r\n    }\r\n\r\n    groupId.value = null;\r\n    currentIndex.value = 0;\r\n    results.value = [];\r\n\r\n    userStore.fetchRuns();\r\n\r\n    return true;\r\n  };\r\n\r\n  return {\r\n    groupId,\r\n    currentIndex,\r\n    results,\r\n    exercises,\r\n    currentExercise,\r\n    setGroupId,\r\n    saveResult,\r\n    goNext,\r\n    goBack,\r\n    cancelRun,\r\n    submitRun,\r\n  };\r\n});\r\n","<script setup>\r\nimport { ref, watch, computed } from \"vue\";\r\nimport { useRunRecorderStore } from \"@/stores/runRecorder.js\";\r\nconst emit = defineEmits([\"complete\"]);\r\nconst runRecorder = useRunRecorderStore();\r\nconst score = ref(null);\r\nconst timeTaken = ref(null);\r\nconst scoreForm = ref(null);\r\nconst scoreRules = computed(() => [\r\n  (v) => (v !== null && v !== \"\") || \"Score cannot be empty.\",\r\n  (v) =>\r\n    parseFloat(v) <= runRecorder.currentExercise?.max_points ||\r\n    `Score cannot exceed ${runRecorder.currentExercise?.max_points} points.`,\r\n]);\r\nconst timeRules = [\r\n  (v) => (v !== null && v !== \"\") || \"Time cannot be empty.\",\r\n  (v) => !isNaN(parseFloat(v)) || \"Time must be a number.\",\r\n];\r\nwatch(\r\n  () => runRecorder.currentIndex,\r\n  () => {\r\n    const existing = runRecorder.results[runRecorder.currentIndex];\r\n    score.value = existing?.score ?? null;\r\n    timeTaken.value = existing?.time_taken ?? null;\r\n  },\r\n  { immediate: true }\r\n);\r\n\r\nconst handleNext = async () => {\r\n  const { valid } = await scoreForm.value.validate();\r\n  if (!valid) return;\r\n  runRecorder.saveResult(score.value, timeTaken.value);\r\n  if (runRecorder.currentIndex < runRecorder.exercises.length - 1) {\r\n    runRecorder.goNext();\r\n  } else {\r\n    emit(\"complete\");\r\n  }\r\n};\r\n\r\nconst handleBack = () => {\r\n  runRecorder.goBack();\r\n};\r\n\r\nconst cancel = () => {\r\n  runRecorder.cancelRun();\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <v-slide-x-transition mode=\"out-in\">\r\n      <v-card\r\n        v-if=\"runRecorder.currentExercise\"\r\n        :key=\"runRecorder.currentIndex\"\r\n        class=\"mt-4\"\r\n        elevation=\"2\"\r\n      >\r\n        <v-card-title class=\"text-h6 font-weight-bold\">\r\n          {{ runRecorder.currentExercise.name }}\r\n        </v-card-title>\r\n        <v-card-subtitle class=\"text-caption\">\r\n          Exercise {{ runRecorder.currentIndex + 1 }} of\r\n          {{ runRecorder.exercises.length }}\r\n        </v-card-subtitle>\r\n        <v-card-text>\r\n          <div class=\"text-subtitle-1\">\r\n            <strong>Distance:</strong>\r\n            {{ runRecorder.currentExercise.distance_yards }} yards\r\n          </div>\r\n          <div class=\"text-subtitle-1\">\r\n            <strong>Par Time:</strong>\r\n            {{ runRecorder.currentExercise.par_time ?? \"N/A\" }} seconds\r\n          </div>\r\n          <div class=\"text-subtitle-1\">\r\n            <strong>Start Position:</strong>\r\n            {{\r\n              runRecorder.currentExercise?.options?.start_position ??\r\n              \"Not specified\"\r\n            }}\r\n          </div>\r\n          <div\r\n            v-if=\"runRecorder.currentExercise?.options?.hand_usage\"\r\n            class=\"text-subtitle-1\"\r\n          >\r\n            <strong>Hand Usage:</strong>\r\n            {{ runRecorder.currentExercise?.options?.hand_usage }}\r\n          </div>\r\n          <div v-if=\"runRecorder.currentExercise.options != null\">\r\n            <div\r\n              v-if=\"runRecorder.currentExercise.options.modified_scoring\"\r\n              class=\"text-subtitle-1\"\r\n            >\r\n              <strong>Modified Scoring Rules:</strong>\r\n              {{ runRecorder.currentExercise.options.modified_scoring_desc }}\r\n            </div>\r\n          </div>\r\n          <div class=\"text-subtitle-1 mt-2\"><strong>Instructions:</strong></div>\r\n          <div class=\"text-subtitle-1\" style=\"white-space: pre-line\">\r\n            {{ runRecorder.currentExercise.instructions }}\r\n          </div>\r\n        </v-card-text>\r\n\r\n        <v-card-text>\r\n          <v-form ref=\"scoreForm\"\r\n            ><v-row>\r\n              <v-col cols=\"12\" md=\"6\">\r\n                <v-text-field\r\n                  v-model=\"score\"\r\n                  label=\"Score\"\r\n                  type=\"number\"\r\n                  variant=\"outlined\"\r\n                  step=\"0.01\"\r\n                  :rules=\"scoreRules\"\r\n                />\r\n              </v-col>\r\n              <v-col\r\n                cols=\"12\"\r\n                md=\"6\"\r\n                v-if=\"runRecorder.currentExercise?.par_time\"\r\n              >\r\n                <v-text-field\r\n                  v-model=\"timeTaken\"\r\n                  label=\"Time (seconds)\"\r\n                  type=\"number\"\r\n                  variant=\"outlined\"\r\n                  step=\"0.01\"\r\n                  :rules=\"timeRules\"\r\n                />\r\n              </v-col>\r\n            </v-row>\r\n          </v-form>\r\n        </v-card-text>\r\n\r\n        <v-card-actions>\r\n          <v-btn @click=\"cancel\" variant=\"outlined\" color=\"red\"\r\n            >Cancel Run</v-btn\r\n          >\r\n          <v-spacer />\r\n          <v-btn\r\n            @click=\"handleBack\"\r\n            variant=\"outlined\"\r\n            :disabled=\"runRecorder.currentIndex === 0\"\r\n            class=\"mr-3\"\r\n            >Back</v-btn\r\n          >\r\n          <v-btn @click=\"handleNext\" color=\"primary\" variant=\"outlined\"\r\n            >Next</v-btn\r\n          >\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-slide-x-transition>\r\n  </div>\r\n</template>\r\n","import script from \"./RunRecorder.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RunRecorder.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { computed } from \"vue\";\r\nconst props = defineProps({\r\n  modelValue: Boolean,\r\n  text: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n});\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\nconst isOpen = computed({\r\n  get: () => props.modelValue,\r\n  set: (val) => emit(\"update:modelValue\", val),\r\n});\r\n</script>\r\n\r\n<template>\r\n  <v-dialog v-model=\"isOpen\" width=\"auto\">\r\n    <v-card>\r\n      <v-card-title>Scoring Rules</v-card-title>\r\n      <v-card-text>\r\n        {{ props.text }}\r\n      </v-card-text>\r\n      <v-card-actions>\r\n        <v-spacer></v-spacer>\r\n        <v-btn @click=\"isOpen = false\">Close</v-btn>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n","import script from \"./ScoringRulesDialog.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ScoringRulesDialog.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { ref, computed } from \"vue\";\r\nimport { useSnackbarStore } from \"@/stores/snackbar.js\";\r\nimport { useRunRecorderStore } from \"@/stores/runRecorder\";\r\nconst runRecorderStore = useRunRecorderStore();\r\nconst snackbarStore = useSnackbarStore();\r\nconst props = defineProps({\r\n  results: {\r\n    type: Array,\r\n    required: true,\r\n  },\r\n  exercises: {\r\n    type: Array,\r\n    required: true,\r\n  },\r\n});\r\n\r\nconst emit = defineEmits([\"submit\", \"edit\", \"cancel\"]);\r\n\r\nconst editedResults = ref([...props.results]);\r\n\r\nconst getDistance = (id) => {\r\n  return props.exercises.find((e) => e.id === id)?.distance_yards || \"Unknown\";\r\n};\r\n\r\nconst getExerciseName = (id) => {\r\n  return props.exercises.find((e) => e.id === id)?.name || \"Unknown\";\r\n};\r\n\r\nconst getMaxScore = (id) => {\r\n  return props.exercises.find((e) => e.id === id)?.max_points || \"Unknown\";\r\n};\r\n\r\nconst hasParTime = (id) => {\r\n  if (props.exercises.find((e) => e.id === id)?.par_time > 0) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst isScoreInvalid = (result) => {\r\n  const max = getMaxScore(result.exercise_id);\r\n  return typeof max === \"number\" && result.score > max;\r\n};\r\n\r\nconst hasInvalidScores = computed(() =>\r\n  editedResults.value.some((r) => isScoreInvalid(r))\r\n);\r\n\r\nconst confirm = async () => {\r\n  if (hasInvalidScores.value == true) {\r\n    snackbarStore.addSnackbar(\r\n      \"One or more of the entered scores exceeds the maximum possible points for that exercise. Please update the score(s) accordingly.\",\r\n      \"red-lighten-1\",\r\n      -1\r\n    );\r\n    return;\r\n  }\r\n  try {\r\n    // Overwrite results in the store\r\n    runRecorderStore.results = [...editedResults.value];\r\n    await runRecorderStore.submitRun();\r\n    emit(\"submitted\");\r\n  } catch (error) {\r\n    console.error(\"Error submitting run:\", error.message);\r\n    alert(\"There was an error submitting your run. Please try again.\");\r\n  }\r\n};\r\n\r\nconst edit = () => {\r\n  emit(\"edit\");\r\n};\r\n\r\nconst cancel = () => {\r\n  emit(\"cancel\");\r\n};\r\n</script>\r\n\r\n<template>\r\n  <v-card class=\"mt-4\" elevation=\"2\">\r\n    <v-card-title class=\"text-h6 font-weight-bold d-flex\">\r\n      <v-row class=\"mt-0\">\r\n        <v-col class=\"py-0\" cols=\"12\" sm=\"auto\">Review Your Results</v-col>\r\n        <v-spacer></v-spacer>\r\n        <v-col class=\"pt-0\" cols=\"12\" sm=\"auto\"\r\n          ><v-btn\r\n            class=\"ml-md-5\"\r\n            color=\"red\"\r\n            size=\"x-small\"\r\n            variant=\"outlined\"\r\n            @click=\"cancel\"\r\n            >Cancel Run</v-btn\r\n          ></v-col\r\n        >\r\n      </v-row>\r\n    </v-card-title>\r\n    <v-card-text>\r\n      <div class=\"table-scroll-wrapper\">\r\n        <v-table>\r\n          <thead>\r\n            <tr>\r\n              <th>Exercise</th>\r\n              <th>Distance</th>\r\n              <th>Score</th>\r\n              <th>Max Score</th>\r\n              <th>Time (s)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(result, index) in editedResults\" :key=\"index\">\r\n              <td>{{ getExerciseName(result.exercise_id) }}</td>\r\n              <td>{{ getDistance(result.exercise_id) }} yards</td>\r\n              <td>\r\n                <v-text-field\r\n                  v-model=\"editedResults[index].score\"\r\n                  type=\"number\"\r\n                  density=\"compact\"\r\n                  hide-details\r\n                  :error=\"isScoreInvalid(result)\"\r\n                />\r\n              </td>\r\n              <td>{{ getMaxScore(result.exercise_id) }}</td>\r\n              <td>\r\n                <v-text-field\r\n                  v-model=\"editedResults[index].time_taken\"\r\n                  type=\"number\"\r\n                  density=\"compact\"\r\n                  hide-details\r\n                  :disabled=\"hasParTime(result.exercise_id)\"\r\n                />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </v-table>\r\n      </div>\r\n    </v-card-text>\r\n\r\n    <v-card-actions>\r\n      <v-btn @click=\"edit\" variant=\"outlined\">Back to exercises</v-btn>\r\n      <v-spacer />\r\n      <v-btn @click=\"confirm\" variant=\"outlined\" color=\"primary\">Submit</v-btn>\r\n    </v-card-actions>\r\n  </v-card>\r\n</template>\r\n\r\n<style scoped>\r\n.table-scroll-wrapper {\r\n  overflow-x: auto;\r\n  -webkit-overflow-scrolling: touch;\r\n}\r\n\r\n.table-scroll-wrapper > .v-table {\r\n  min-width: 600px; /* ensure horizontal scroll is triggered */\r\n}\r\n</style>\r\n","import script from \"./RunSummary.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RunSummary.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./RunSummary.vue?vue&type=style&index=0&id=e7d5094e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-e7d5094e\"]])\n\nexport default __exports__","<script setup>\r\nimport { ref, computed, onMounted } from \"vue\";\r\nimport { useRouter } from \"vue-router\";\r\nimport { useExerciseStore } from \"@/stores/exercise.js\";\r\nimport { useRunRecorderStore } from \"@/stores/runRecorder.js\";\r\nimport RunRecorder from \"@/components/record-new/RunRecorder.vue\";\r\nimport ScoringRulesDialog from \"@/components/record-new/ScoringRulesDialog.vue\";\r\nimport RunSummary from \"@/components/record-new/RunSummary.vue\";\r\nconst router = useRouter();\r\nconst exerciseStore = useExerciseStore();\r\nconst runRecorderStore = useRunRecorderStore();\r\nconst selectedGroupId = ref(null);\r\nconst showScoringRules = ref(false);\r\nconst recordingRun = computed(() => runRecorderStore.groupId !== null);\r\n\r\nconst selectedGroup = computed(() => {\r\n  if (!selectedGroupId.value) {\r\n    return null;\r\n  }\r\n  return exerciseStore.exerciseGroupData.list.find(\r\n    (g) => g.id === selectedGroupId.value\r\n  );\r\n});\r\n\r\nonMounted(() => {\r\n  if (\r\n    exerciseStore.exerciseGroupData.list.length === 1 ||\r\n    exerciseStore.allExercises.length < 1\r\n  ) {\r\n    exerciseStore.getExerciseGroups();\r\n    exerciseStore.getAllExercises();\r\n  }\r\n});\r\n\r\nconst startRun = () => {\r\n  if (selectedGroupId.value) {\r\n    runRecorderStore.setGroupId(selectedGroupId.value);\r\n  }\r\n};\r\n\r\nconst reviewing = ref(false);\r\n\r\nconst showSummary = () => {\r\n  reviewing.value = true;\r\n};\r\n\r\nconst submitRunComplete = () => {\r\n  recordingRun.value = false;\r\n  reviewing.value = false;\r\n  redirectToDash();\r\n};\r\n\r\nconst redirectToDash = () => {\r\n  router.push({ name: \"Dashboard\" });\r\n};\r\n\r\nconst cancelFromSummary = () => {\r\n  recordingRun.value = false;\r\n  reviewing.value = false;\r\n  runRecorderStore.cancelRun();\r\n};\r\n</script>\r\n\r\n<template>\r\n  <v-container>\r\n    <v-slide-y-transition mode=\"out-in\">\r\n      <div v-if=\"!recordingRun && !reviewing\">\r\n        <v-row class=\"mt-10\">\r\n          <v-col cols=\"12\">\r\n            <v-card>\r\n              <v-card-text>\r\n                <v-select\r\n                  v-model=\"selectedGroupId\"\r\n                  :items=\"exerciseStore.createSelectableGroupsForNewRun\"\r\n                  item-title=\"name\"\r\n                  item-value=\"id\"\r\n                  label=\"Select an Exercise Group\"\r\n                  :loading=\"exerciseStore.exerciseGroupData.loading\"\r\n                  variant=\"outlined\"\r\n                />\r\n              </v-card-text>\r\n            </v-card>\r\n          </v-col>\r\n        </v-row>\r\n\r\n        <v-row v-if=\"selectedGroup\">\r\n          <v-col cols=\"12\">\r\n            <v-card class=\"pa-4\" elevation=\"2\">\r\n              <v-card-title class=\"text-h5 font-weight-bold\">\r\n                {{ selectedGroup.name }}\r\n              </v-card-title>\r\n              <v-card-text\r\n                class=\"text-subtitle-1\"\r\n                style=\"white-space: pre-line\"\r\n              >\r\n                {{ selectedGroup.description }}\r\n              </v-card-text>\r\n              <v-card-text class=\"text-h6 pb-0\">Scoring:</v-card-text>\r\n              <v-card-text\r\n                class=\"text-subtitle-1\"\r\n                style=\"white-space: pre-line\"\r\n              >\r\n                {{ selectedGroup.scoring_rules }}\r\n              </v-card-text>\r\n            </v-card>\r\n          </v-col>\r\n        </v-row>\r\n\r\n        <v-row justify=\"center\" class=\"pb-5\">\r\n          <v-btn @click=\"redirectToDash\" class=\"mr-3\">Cancel</v-btn>\r\n          <v-btn @click=\"startRun\" color=\"primary\" v-if=\"selectedGroup\"\r\n            >Start</v-btn\r\n          >\r\n        </v-row>\r\n      </div>\r\n\r\n      <div v-else-if=\"recordingRun && !reviewing\">\r\n        <RunRecorder @complete=\"showSummary\" />\r\n        <v-row class=\"mt-10\" justify=\"center\">\r\n          <v-btn @click=\"showScoringRules = true\"\r\n            >Show General Scoring Rules</v-btn\r\n          >\r\n        </v-row>\r\n      </div>\r\n\r\n      <div v-else>\r\n        <RunSummary\r\n          v-if=\"reviewing\"\r\n          :results=\"runRecorderStore.results\"\r\n          :exercises=\"runRecorderStore.exercises\"\r\n          @submitted=\"submitRunComplete\"\r\n          @edit=\"reviewing = false\"\r\n          @cancel=\"cancelFromSummary\"\r\n        />\r\n      </div>\r\n    </v-slide-y-transition>\r\n\r\n    <ScoringRulesDialog\r\n      v-model=\"showScoringRules\"\r\n      :text=\"selectedGroup?.scoring_rules\"\r\n      @closeDialog=\"showScoringRules = false\"\r\n    />\r\n  </v-container>\r\n</template>\r\n","import script from \"./RecordNew.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RecordNew.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["useExerciseStore","defineStore","exerciseGroupData","reactive","list","name","id","loading","allExercises","ref","newRunRecording","group_id","exercises","getExerciseGroups","async","data","groupData","supabase","from","select","allOption","sorted","sort","a","b","createSelectableGroupsForNewRun","computed","filter","l","getAllExercises","order","value","useRunRecorderStore","exerciseStore","groupId","currentIndex","results","e","currentExercise","setGroupId","saveResult","score","time_taken","exercise_id","parseFloat","goNext","length","goBack","cancelRun","submitRun","userStore","useUserStore","userData","alt","Error","error","rpc","p_alt_user_id","p_group_id","p_results","fetchRuns","emit","__emit","runRecorder","timeTaken","scoreForm","scoreRules","v","max_points","timeRules","isNaN","watch","existing","immediate","handleNext","valid","validate","handleBack","cancel","__exports__","props","__props","isOpen","get","modelValue","set","val","runRecorderStore","snackbarStore","useSnackbarStore","editedResults","getDistance","find","distance_yards","getExerciseName","getMaxScore","hasParTime","par_time","isScoreInvalid","result","max","hasInvalidScores","some","r","confirm","console","message","alert","addSnackbar","edit","router","useRouter","selectedGroupId","showScoringRules","recordingRun","selectedGroup","g","onMounted","startRun","reviewing","showSummary","submitRunComplete","redirectToDash","push","cancelFromSummary"],"sourceRoot":""}