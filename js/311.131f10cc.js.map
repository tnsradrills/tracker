{"version":3,"file":"js/311.131f10cc.js","mappings":"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","sources":["webpack://tracker/./src/stores/exercise.js","webpack://tracker/./src/components/dash/MainTable.vue","webpack://tracker/./src/components/dash/MainTable.vue?f798","webpack://tracker/./src/components/dash/SparkLine.vue","webpack://tracker/./src/components/dash/SparkLine.vue?d148","webpack://tracker/./src/views/DashboardPage.vue","webpack://tracker/./src/views/DashboardPage.vue?892a"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport { reactive, ref, computed } from \"vue\";\r\nimport { supabase } from \"./supabase.js\";\r\nexport const useExerciseStore = defineStore(\"exercise\", () => {\r\n  const exerciseGroupData = reactive({\r\n    list: [\r\n      {\r\n        name: \"All\",\r\n        id: 0,\r\n      },\r\n    ],\r\n    loading: true,\r\n  });\r\n\r\n  const allExercises = ref([]);\r\n\r\n  const newRunRecording = reactive({\r\n    group_id: null,\r\n    exercises: [],\r\n  });\r\n\r\n  const getExerciseGroups = async () => {\r\n    const { data: groupData } = await supabase\r\n      .from(\"exercise_groups\")\r\n      .select(\"*\");\r\n\r\n    if (groupData) {\r\n      const allOption = { id: 0, name: \"All\" };\r\n\r\n      const sorted = [allOption, ...groupData].sort((a, b) => a.id - b.id);\r\n\r\n      exerciseGroupData.list = sorted;\r\n      exerciseGroupData.loading = false;\r\n    }\r\n  };\r\n\r\n  const createSelectableGroupsForNewRun = computed(() => {\r\n    return exerciseGroupData.list.filter((l) => {\r\n      return l.id != 0;\r\n    });\r\n  });\r\n\r\n  const getAllExercises = async () => {\r\n    const { data } = await supabase\r\n      .from(\"exercises\")\r\n      .select(\"*\")\r\n      .order(\"group_id\")\r\n      .order(\"ordering\");\r\n    if (data) {\r\n      allExercises.value = data;\r\n    }\r\n  };\r\n\r\n  return {\r\n    exerciseGroupData,\r\n    createSelectableGroupsForNewRun,\r\n    allExercises,\r\n    newRunRecording,\r\n    //functions\r\n    getExerciseGroups,\r\n    getAllExercises,\r\n  };\r\n});\r\n","<script setup>\r\nimport { ref } from \"vue\";\r\nconst props = defineProps({\r\n  viewingGroup: {\r\n    type: Number,\r\n    required: true,\r\n  },\r\n  data: {\r\n    type: Array,\r\n    required: true,\r\n  },\r\n});\r\n\r\nconst headers = [\r\n  { title: \"Date\", value: \"created_at_unix\", sortable: true },\r\n  { title: \"Exercise Group\", value: \"group_name\", sortable: true },\r\n  { title: \"Total Score\", value: \"total_score\", sortable: true },\r\n];\r\n\r\nconst expandedTableRows = ref([]);\r\n\r\nconst timeDisplay = (item) => {\r\n  if (item.exercises.par_time && item.time_taken) {\r\n    return item.time_taken + \" / \" + item.exercises.par_time + \" seconds\";\r\n  } else if (item.time_taken) {\r\n    return item.time_taken + \" seconds\";\r\n  } else {\r\n    return \"N/A\";\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <v-card elevation=\"2\">\r\n    <v-card-title>History</v-card-title>\r\n    <v-data-table\r\n      :headers=\"headers\"\r\n      :items=\"props.data\"\r\n      :items-per-page=\"10\"\r\n      expand-on-click\r\n      show-expand\r\n      item-value=\"id\"\r\n      class=\"elevation-1\"\r\n      :expanded=\"expandedTableRows\"\r\n      hide-default-footer\r\n    >\r\n      <template #item.created_at_unix=\"{ item }\">\r\n        {{ item.created_at }}\r\n      </template>\r\n      <template #item.avg_time_per_string=\"{ value }\">\r\n        {{ value + \" seconds\" }}\r\n      </template>\r\n      <template #item.total_score=\"{ item }\">\r\n        {{ item.total_score + \" / \" + item.max_possible_score }}\r\n      </template>\r\n      <template #expanded-row=\"{ item }\">\r\n        <tr>\r\n          <td :colspan=\"headers.length\" class=\"pa-4\">\r\n            <v-card flat class=\"mx-2 my-2\">\r\n              <v-card-title class=\"text-h6 font-weight-bold\">\r\n                Run Details for {{ item.group_name }} ({{ item.created_at }})\r\n              </v-card-title>\r\n              <v-card-text>\r\n                <v-data-table\r\n                  :items=\"item.original.run_results\"\r\n                  :headers=\"[\r\n                    { title: 'Exercise', value: 'name' },\r\n                    { title: 'Score', value: 'score' },\r\n                    { title: 'Time Taken', value: 'time_taken' },\r\n                    { title: 'Shot Hit Factor', value: 'hit_factor' },\r\n                    { title: 'Baseline Hit Factor', value: 'baseline_hf' },\r\n                  ]\"\r\n                  class=\"elevation-1\"\r\n                  hide-default-footer\r\n                  dense\r\n                >\r\n                  <template #item.name=\"{ item }\">\r\n                    {{ item.exercises?.name || \"Unnamed Drill\" }}\r\n                  </template>\r\n                  <template #item.score=\"{ item }\">\r\n                    {{\r\n                      item.exercises?.max_points\r\n                        ? item.score + \" / \" + item.exercises?.max_points\r\n                        : item.score\r\n                    }}\r\n                  </template>\r\n                  <template #item.time_taken=\"{ item }\">\r\n                    {{ timeDisplay(item) }}\r\n                  </template>\r\n                  <template #item.hit_factor=\"{ item }\">\r\n                    <span\r\n                      class=\"font-weight-bold\"\r\n                      :class=\"\r\n                        item.hit_factor >= item.baseline_hf\r\n                          ? 'text-green'\r\n                          : 'text-red'\r\n                      \"\r\n                      >{{ item.hit_factor }}</span\r\n                    >\r\n                  </template>\r\n                </v-data-table>\r\n              </v-card-text>\r\n            </v-card>\r\n          </td>\r\n        </tr>\r\n      </template>\r\n    </v-data-table>\r\n  </v-card>\r\n</template>\r\n","import script from \"./MainTable.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MainTable.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { computed } from \"vue\";\r\nconst props = defineProps({\r\n  data: {\r\n    type: Array,\r\n    required: true,\r\n  },\r\n  viewingGroup: {\r\n    type: Number,\r\n    required: true,\r\n  },\r\n  groupNames: {\r\n    type: Array,\r\n    required: true,\r\n  },\r\n});\r\nconst trendData = computed(() => {\r\n  const raw =\r\n    props.viewingGroup == 0\r\n      ? props.data.map((r) => parseFloat(r.total_score_percentage))\r\n      : props.data.map((r) => parseFloat(r.total_score));\r\n\r\n  const filtered = raw.filter((v) => typeof v === \"number\" && !isNaN(v));\r\n  return filtered.slice(0, 10).reverse();\r\n});\r\nconst gradients = [\"#1feaea\", \"#ffd200\", \"#f72047\"];\r\n\r\nconst sparklineLabels = computed(() => {\r\n  return trendData.value.map((v) =>\r\n    props.viewingGroup === 0 ? `${v}%` : `${v}`\r\n  );\r\n});\r\n\r\nconst title = computed(() => {\r\n  if (props.viewingGroup == 0) {\r\n    return \"Overall Score Percentage Trend\";\r\n  } else {\r\n    const name =\r\n      props.groupNames.find((g) => g.id === props.viewingGroup)?.name ||\r\n      \"Unknown\";\r\n    return \"Score Trend For \" + name;\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <v-card>\r\n    <v-card-title>{{ title }}</v-card-title>\r\n    <v-card-text>\r\n      <v-sparkline\r\n        :auto-line-width=\"false\"\r\n        :fill=\"true\"\r\n        :gradient=\"gradients\"\r\n        gradient-direction=\"top\"\r\n        line-width=\"2\"\r\n        :model-value=\"trendData\"\r\n        padding=\"14\"\r\n        smooth=\"10\"\r\n        stroke-linecap=\"round\"\r\n        :auto-draw=\"true\"\r\n        :labels=\"sparklineLabels\"\r\n      >\r\n      </v-sparkline>\r\n    </v-card-text>\r\n  </v-card>\r\n</template>\r\n","import script from \"./SparkLine.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SparkLine.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { computed, ref, onMounted } from \"vue\";\r\nimport { useUserStore } from \"@/stores/userData\";\r\nimport { useExerciseStore } from \"@/stores/exercise.js\";\r\nimport MainTable from \"@/components/dash/MainTable.vue\";\r\nimport SparkLine from \"@/components/dash/SparkLine.vue\";\r\nimport { useDisplay } from \"vuetify\";\r\nconst { smAndUp } = useDisplay();\r\nconst userStore = useUserStore();\r\nconst exerciseStore = useExerciseStore();\r\nconst viewingGroup = ref(0);\r\n\r\nconst filteredRuns = computed(() => {\r\n  const runs = userStore.userData.runs ?? [];\r\n  return viewingGroup.value === 0\r\n    ? runs\r\n    : runs.filter((run) => run.exercise_group_id === viewingGroup.value);\r\n});\r\n\r\nconst averageScorePercentage = computed(() => {\r\n  const validRuns = filteredRuns.value.filter((run) =>\r\n    run.run_results.some(\r\n      (r) =>\r\n        typeof r.score === \"number\" &&\r\n        typeof r.exercises?.max_points === \"number\"\r\n    )\r\n  );\r\n\r\n  if (!validRuns.length) return \"N/A\";\r\n\r\n  const totalPercent = validRuns.reduce((sum, run) => {\r\n    const { total, max } = run.run_results.reduce(\r\n      (acc, r) => {\r\n        if (\r\n          typeof r.score === \"number\" &&\r\n          typeof r.exercises?.max_points === \"number\"\r\n        ) {\r\n          acc.total += r.score;\r\n          acc.max += r.exercises.max_points;\r\n        }\r\n        return acc;\r\n      },\r\n      { total: 0, max: 0 }\r\n    );\r\n    return sum + (max > 0 ? (total / max) * 100 : 0);\r\n  }, 0);\r\n\r\n  return (totalPercent / validRuns.length).toFixed(1);\r\n});\r\n\r\nconst consistencyScore = computed(() => {\r\n  const percentages = filteredRuns.value\r\n    .map((run) => {\r\n      const { total, max } = run.run_results.reduce(\r\n        (acc, r) => {\r\n          if (\r\n            typeof r.score === \"number\" &&\r\n            typeof r.exercises?.max_points === \"number\"\r\n          ) {\r\n            acc.total += r.score;\r\n            acc.max += r.exercises.max_points;\r\n          }\r\n          return acc;\r\n        },\r\n        { total: 0, max: 0 }\r\n      );\r\n      return max > 0 ? (total / max) * 100 : null;\r\n    })\r\n    .filter((v) => v !== null);\r\n\r\n  if (percentages.length < 2) return \"N/A\";\r\n\r\n  const avg = percentages.reduce((a, b) => a + b, 0) / percentages.length;\r\n  const variance =\r\n    percentages.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) /\r\n    percentages.length;\r\n  const stddev = Math.sqrt(variance);\r\n  return (100 - stddev).toFixed(1);\r\n});\r\n\r\nconst runSummaryRows = computed(() =>\r\n  filteredRuns.value.map((run) => {\r\n    let scoreTotal = 0;\r\n    let timeTotal = 0;\r\n    let maxTotal = 0;\r\n\r\n    const results = run.run_results.map((r) => {\r\n      const max = r.exercises?.max_points || 0;\r\n      const par = r.exercises?.par_time || null;\r\n      const score = r.score;\r\n      const time = r.time_taken;\r\n\r\n      maxTotal += max;\r\n      scoreTotal += score;\r\n      timeTotal += time;\r\n\r\n      return {\r\n        ...r,\r\n        hit_factor: par ? (score / time).toFixed(2) : null,\r\n        baseline_hf: par && max ? (max / par).toFixed(2) : null,\r\n      };\r\n    });\r\n\r\n    const hitFactor = scoreTotal / timeTotal;\r\n    const scorePercent = maxTotal\r\n      ? ((scoreTotal / maxTotal) * 100).toFixed(2)\r\n      : \"N/A\";\r\n\r\n    return {\r\n      id: run.id,\r\n      created_at: new Date(run.created_at).toLocaleDateString(),\r\n      created_at_unix: new Date(run.created_at).getTime(),\r\n      group_name: run.exercise_groups?.name || \"Unknown\",\r\n      total_score: scoreTotal.toFixed(2),\r\n      total_score_percentage: scorePercent,\r\n      max_possible_score: maxTotal.toFixed(2),\r\n      total_hit_factor: hitFactor.toFixed(2),\r\n      original: { ...run, run_results: results },\r\n    };\r\n  })\r\n);\r\n\r\nonMounted(() => {\r\n  exerciseStore.getExerciseGroups();\r\n  exerciseStore.getAllExercises();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <v-container fluid>\r\n      <v-row>\r\n        <v-col cols=\"12\" md=\"4\">\r\n          <v-select\r\n            v-model=\"viewingGroup\"\r\n            label=\"Currently Viewing Exercise Group:\"\r\n            :items=\"exerciseStore.exerciseGroupData.list\"\r\n            item-title=\"name\"\r\n            item-value=\"id\"\r\n            :loading=\"exerciseStore.exerciseGroupData.loading\"\r\n          />\r\n        </v-col>\r\n      </v-row>\r\n      <v-row justify=\"center\" v-if=\"runSummaryRows.length == 0\">\r\n        <v-col cols=\"12\" md=\"8\">\r\n          <v-card>\r\n            <v-card-title>Welcome! We're glad you're here.</v-card-title>\r\n            <v-card-text>\r\n              When you're ready, you'll find a link to record your first\r\n              exercise group run in the top right corner. This site will keep\r\n              track of the last 10 runs you performed for all of the exercise\r\n              groups above so you can see your progress over time.\r\n            </v-card-text>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n      <v-row class=\"mt-5\" v-if=\"runSummaryRows.length > 1\">\r\n        <v-col cols=\"12\" md=\"6\">\r\n          <v-card elevation=\"2\" class=\"pa-4\">\r\n            <div class=\"text-h6 text-center\">\r\n              Average Score % Across Last 10 Runs\r\n            </div>\r\n            <div class=\"text-h4 font-weight-bold text-center\">\r\n              {{ averageScorePercentage }}%\r\n            </div>\r\n          </v-card>\r\n        </v-col>\r\n        <v-col cols=\"12\" md=\"6\">\r\n          <v-card elevation=\"2\" class=\"pa-4\">\r\n            <div class=\"text-h6 text-center d-flex justify-center align-center\">\r\n              Consistency Score\r\n              <v-tooltip location=\"top\" v-if=\"smAndUp\">\r\n                <template #activator=\"{ props }\">\r\n                  <v-icon v-bind=\"props\" size=\"18\" color=\"primary\" class=\"ml-2\">\r\n                    mdi-help-circle-outline\r\n                  </v-icon>\r\n                </template>\r\n                <div style=\"max-width: 250px; white-space: normal\">\r\n                  Consistency is calculated by averaging your score percentages\r\n                  and subtracting the standard deviation. A lower variation in\r\n                  scores results in a higher consistency score.\r\n                </div>\r\n              </v-tooltip>\r\n            </div>\r\n            <div class=\"text-h4 font-weight-bold text-center\">\r\n              {{ consistencyScore }}\r\n            </div>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n\r\n      <v-row justify=\"center\">\r\n        <v-col cols=\"12\" md=\"8\">\r\n          <SparkLine\r\n            :data=\"runSummaryRows\"\r\n            :viewing-group=\"viewingGroup\"\r\n            :group-names=\"exerciseStore.exerciseGroupData.list\"\r\n            v-if=\"runSummaryRows.length > 1\"\r\n          />\r\n          <v-card v-else-if=\"runSummaryRows.length == 1\">\r\n            <v-card-text class=\"text-center\">\r\n              Go through one more exercise group to start seeing a trendline!\r\n            </v-card-text>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n\r\n      <v-row>\r\n        <v-col cols=\"12\">\r\n          <MainTable :viewing-group=\"viewingGroup\" :data=\"runSummaryRows\" />\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n  </div>\r\n</template>\r\n","import script from \"./DashboardPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DashboardPage.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["useExerciseStore","defineStore","exerciseGroupData","reactive","list","name","id","loading","allExercises","ref","newRunRecording","group_id","exercises","getExerciseGroups","async","data","groupData","supabase","from","select","allOption","sorted","sort","a","b","createSelectableGroupsForNewRun","computed","filter","l","getAllExercises","order","value","props","__props","headers","title","sortable","expandedTableRows","timeDisplay","item","par_time","time_taken","__exports__","trendData","raw","viewingGroup","map","r","parseFloat","total_score_percentage","total_score","filtered","v","isNaN","slice","reverse","gradients","sparklineLabels","groupNames","find","g","smAndUp","useDisplay","userStore","useUserStore","exerciseStore","filteredRuns","runs","userData","run","exercise_group_id","averageScorePercentage","validRuns","run_results","some","score","max_points","length","totalPercent","reduce","sum","total","max","acc","toFixed","consistencyScore","percentages","avg","variance","val","Math","pow","stddev","sqrt","runSummaryRows","scoreTotal","timeTotal","maxTotal","results","par","time","hit_factor","baseline_hf","hitFactor","scorePercent","created_at","Date","toLocaleDateString","created_at_unix","getTime","group_name","exercise_groups","max_possible_score","total_hit_factor","original","onMounted"],"sourceRoot":""}