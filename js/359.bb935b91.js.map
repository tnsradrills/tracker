{"version":3,"file":"js/359.bb935b91.js","mappings":"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","sources":["webpack://tracker/./src/stores/exercise.js","webpack://tracker/./src/stores/leaderboard.js","webpack://tracker/./src/views/LeaderBoard.vue","webpack://tracker/./src/views/LeaderBoard.vue?33dc","webpack://tracker/./src/stores/regionData.js"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport { reactive, ref, computed } from \"vue\";\r\nimport { supabase } from \"./supabase.js\";\r\nexport const useExerciseStore = defineStore(\"exercise\", () => {\r\n  const exerciseGroupData = reactive({\r\n    list: [\r\n      {\r\n        name: \"All\",\r\n        id: 0,\r\n      },\r\n    ],\r\n    loading: true,\r\n  });\r\n\r\n  const allExercises = ref([]);\r\n\r\n  const newRunRecording = reactive({\r\n    group_id: null,\r\n    exercises: [],\r\n  });\r\n\r\n  const getExerciseGroups = async () => {\r\n    const { data: groupData } = await supabase\r\n      .from(\"exercise_groups\")\r\n      .select(\"*\");\r\n\r\n    if (groupData) {\r\n      const allOption = { id: 0, name: \"All\" };\r\n\r\n      const sorted = [allOption, ...groupData].sort((a, b) => a.id - b.id);\r\n\r\n      exerciseGroupData.list = sorted;\r\n      exerciseGroupData.loading = false;\r\n    }\r\n  };\r\n\r\n  const createSelectableGroupsForNewRun = computed(() => {\r\n    return exerciseGroupData.list.filter((l) => {\r\n      return l.id != 0;\r\n    });\r\n  });\r\n\r\n  const getAllExercises = async () => {\r\n    const { data } = await supabase\r\n      .from(\"exercises\")\r\n      .select(\"*\")\r\n      .order(\"group_id\")\r\n      .order(\"ordering\");\r\n    if (data) {\r\n      allExercises.value = data;\r\n    }\r\n  };\r\n\r\n  return {\r\n    exerciseGroupData,\r\n    createSelectableGroupsForNewRun,\r\n    allExercises,\r\n    newRunRecording,\r\n    //functions\r\n    getExerciseGroups,\r\n    getAllExercises,\r\n  };\r\n});\r\n","import { defineStore } from \"pinia\";\r\nimport { supabase } from \"@/stores/supabase\";\r\nimport { ref } from \"vue\";\r\nexport const useLeaderboardStore = defineStore(\"leaderboard\", () => {\r\n  const leaderboard = ref([]);\r\n  const loading = ref(true);\r\n  const error = ref(null);\r\n\r\n  const fetchLeaderboard = async (\r\n    groupId,\r\n    region = null,\r\n    sort = \"match_percentage\"\r\n  ) => {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    let query = supabase\r\n      .from(\"leaderboard_scores\")\r\n      .select(\"*\")\r\n      .eq(\"exercise_group_id\", groupId);\r\n\r\n    if (region && region !== \"All\") {\r\n      query = query.eq(\"region\", region);\r\n    }\r\n\r\n    if ([\"total_score\", \"average_score\", \"match_percentage\"].includes(sort)) {\r\n      query = query.order(sort, { ascending: false });\r\n    }\r\n\r\n    const { data, error: err } = await query;\r\n\r\n    if (err) {\r\n      error.value = err.message;\r\n    } else {\r\n      leaderboard.value = data;\r\n    }\r\n\r\n    loading.value = false;\r\n  };\r\n\r\n  return {\r\n    leaderboard,\r\n    loading,\r\n    fetchLeaderboard,\r\n  };\r\n});\r\n","<script setup>\r\nimport { ref, computed, watch, onMounted } from \"vue\";\r\nimport { useExerciseStore } from \"@/stores/exercise.js\";\r\nimport { useLeaderboardStore } from \"@/stores/leaderboard.js\";\r\nimport { useRegionStore } from \"@/stores/regionData.js\";\r\nconst regionStore = useRegionStore();\r\nconst leaderboardStore = useLeaderboardStore();\r\nconst exerciseStore = useExerciseStore();\r\n\r\nconst selectedGroup = ref(1);\r\nconst selectedRegion = ref(null);\r\nconst selectedMetric = ref(\"match_percentage\");\r\n\r\nconst leaderboardRaw = ref([]);\r\n\r\nconst metricOptions = ref([\r\n  {\r\n    text: \"Latest Match Percentage\",\r\n    value: \"match_percentage\",\r\n  },\r\n  {\r\n    text: \"Weighted Match Percentage\",\r\n    value: \"weighted_match_percentage\",\r\n  },\r\n  {\r\n    text: \"Average Score\",\r\n    value: \"average_score\",\r\n  },\r\n  {\r\n    text: \"Top Score\",\r\n    value: \"total_score\",\r\n  },\r\n]);\r\n\r\nconst headers = [\r\n  { title: \"Rank\", value: \"position\" },\r\n  { title: \"User\", value: \"display_name\" },\r\n  { title: \"Region\", value: \"region\" },\r\n  { title: \"Latest Match Percentage\", value: \"match_percentage\" },\r\n  { title: \"Weighted Match Percentage\", value: \"weighted_match_percentage\" },\r\n  { title: \"Avg Score\", value: \"average_score\" },\r\n  { title: \"Summed Total Score\", value: \"total_score\" },\r\n  { title: \"# of Attempts\", value: \"run_count\" },\r\n];\r\n\r\nconst loadLeaderboard = async () => {\r\n  if (!selectedGroup.value) return;\r\n  await leaderboardStore.fetchLeaderboard(\r\n    selectedGroup.value,\r\n    selectedRegion.value,\r\n    selectedMetric.value\r\n  );\r\n  leaderboardRaw.value = leaderboardStore.leaderboard;\r\n};\r\n\r\nconst filteredLeaderboard = computed(() => {\r\n  let filtered = leaderboardRaw.value;\r\n\r\n  if (selectedRegion.value !== null) {\r\n    filtered = filtered.filter((r) => r.region === selectedRegion.value);\r\n  }\r\n\r\n  const sorted = [...filtered].sort(\r\n    (a, b) => b[selectedMetric.value] - a[selectedMetric.value]\r\n  );\r\n\r\n  return sorted.map((entry, index) => ({\r\n    ...entry,\r\n    position: index + 1,\r\n  }));\r\n});\r\n\r\nconst leaderboardUnder5 = computed(() =>\r\n  filteredLeaderboard.value.filter((entry) => entry.run_count < 5)\r\n);\r\n\r\nconst leaderboard5Plus = computed(() =>\r\n  filteredLeaderboard.value.filter((entry) => entry.run_count >= 5)\r\n);\r\n\r\nconst prependedRegionList = computed(() => {\r\n  return [\r\n    { id: null, name: \"All regions\" },\r\n    ...regionStore.regionListData.list,\r\n  ];\r\n});\r\n\r\nconst filteredExerciseGroupList = computed(() => {\r\n  return exerciseStore.exerciseGroupData.list.slice(1);\r\n});\r\n\r\nwatch([selectedGroup], loadLeaderboard, {\r\n  immediate: true,\r\n});\r\n\r\nconst findRegion = (row) => {\r\n  return (\r\n    regionStore.regionListData.list.find((r) => r.id == row)?.name || \"Unknown\"\r\n  );\r\n};\r\n\r\nonMounted(() => {\r\n  if (regionStore.regionListData?.list.length < 1) {\r\n    regionStore.retrieveRegionList();\r\n  }\r\n  if (exerciseStore.exerciseGroupData.list.length === 1) {\r\n    exerciseStore.getExerciseGroups();\r\n  }\r\n  loadLeaderboard();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <v-container>\r\n    <v-card class=\"pa-4\" elevation=\"2\">\r\n      <v-card-title class=\"text-h5 font-weight-bold\">Leaderboards</v-card-title>\r\n\r\n      <v-row class=\"mt-3\">\r\n        <v-col cols=\"12\" md=\"4\">\r\n          <v-select\r\n            v-model=\"selectedGroup\"\r\n            :items=\"filteredExerciseGroupList\"\r\n            item-title=\"name\"\r\n            item-value=\"id\"\r\n            label=\"Exercise Group\"\r\n            variant=\"outlined\"\r\n            density=\"compact\"\r\n          />\r\n        </v-col>\r\n\r\n        <v-col cols=\"12\" md=\"4\">\r\n          <v-select\r\n            v-model=\"selectedRegion\"\r\n            :items=\"prependedRegionList\"\r\n            :loading=\"regionStore.regionListData.loading\"\r\n            item-title=\"name\"\r\n            item-value=\"id\"\r\n            label=\"Region\"\r\n            variant=\"outlined\"\r\n            density=\"compact\"\r\n          />\r\n        </v-col>\r\n\r\n        <v-col cols=\"12\" md=\"4\">\r\n          <v-select\r\n            v-model=\"selectedMetric\"\r\n            :items=\"metricOptions\"\r\n            item-value=\"value\"\r\n            item-title=\"text\"\r\n            label=\"Ranking Metric\"\r\n            variant=\"outlined\"\r\n            density=\"compact\"\r\n          />\r\n        </v-col>\r\n      </v-row>\r\n    </v-card>\r\n\r\n    <v-card class=\"mt-5\" elevation=\"2\">\r\n      <v-card-title class=\"text-h6 font-weight-bold\">\r\n        5 - 10 Attempts\r\n      </v-card-title>\r\n      <v-data-table\r\n        :headers=\"headers\"\r\n        :items=\"leaderboard5Plus\"\r\n        class=\"elevation-1\"\r\n        item-value=\"alt_user_id\"\r\n        dense\r\n        :loading=\"leaderboardStore.loading\"\r\n        items-per-page-text=\"Rows per page\"\r\n        :hide-default-footer=\"leaderboard5Plus.length <= 10\"\r\n      >\r\n        <template #header.weighted_match_percentage>\r\n          <v-tooltip location=\"top\">\r\n            <template #activator=\"{ props }\">\r\n              <span v-bind=\"props\"> Weighted Match % </span>\r\n            </template>\r\n            <span>\r\n              Calculated by comparing your <strong>4 best runs</strong> to the\r\n              top shooter's 4 best runs, scaled by how many attempts you've\r\n              made. Encourages practice without punishing activity.\r\n            </span>\r\n          </v-tooltip>\r\n        </template>\r\n        <template #loading>\r\n          <v-skeleton-loader type=\"table-row@10\"></v-skeleton-loader>\r\n        </template>\r\n        <template #item.position=\"{ item }\">\r\n          <span class=\"font-weight-bold\">#{{ item.position }}</span>\r\n        </template>\r\n        <template #item.match_percentage=\"{ item }\">\r\n          {{ item.match_percentage }}%\r\n        </template>\r\n        <template #item.weighted_match_percentage=\"{ item }\">\r\n          {{ item.weighted_match_percentage }}%\r\n        </template>\r\n        <template #item.total_score=\"{ item }\">\r\n          {{ item.total_score + \" / \" + item.total_possible }}\r\n        </template>\r\n        <template #item.region=\"{ item }\">\r\n          {{ findRegion(item.region) }}\r\n        </template>\r\n      </v-data-table>\r\n    </v-card>\r\n\r\n    <v-card class=\"mt-5\" elevation=\"2\">\r\n      <v-card-title class=\"text-h6 font-weight-bold\">\r\n        1 - 4 Attempts\r\n      </v-card-title>\r\n      <v-data-table\r\n        :headers=\"headers\"\r\n        :items=\"leaderboardUnder5\"\r\n        class=\"elevation-1\"\r\n        item-value=\"alt_user_id\"\r\n        dense\r\n        :loading=\"leaderboardStore.loading\"\r\n        items-per-page-text=\"Rows per page\"\r\n        :hide-default-footer=\"leaderboardUnder5.length <= 10\"\r\n      >\r\n        <template #loading>\r\n          <v-skeleton-loader type=\"table-row@10\"></v-skeleton-loader>\r\n        </template>\r\n        <template #header.weighted_match_percentage>\r\n          <v-tooltip location=\"top\">\r\n            <template #activator=\"{ props }\">\r\n              <span v-bind=\"props\"> Weighted Match % </span>\r\n            </template>\r\n            <span>\r\n              Calculated by comparing your <strong>4 best runs</strong> to the\r\n              top shooter's 4 best runs, scaled by how many attempts you've\r\n              made. Encourages practice without punishing activity.\r\n            </span>\r\n          </v-tooltip>\r\n        </template>\r\n        <template #item.position=\"{ item }\">\r\n          <span class=\"font-weight-bold\">#{{ item.position }}</span>\r\n        </template>\r\n        <template #item.weighted_match_percentage=\"{ item }\">\r\n          {{ item.weighted_match_percentage }}%\r\n        </template>\r\n        <template #item.match_percentage=\"{ item }\">\r\n          {{ item.match_percentage }}%\r\n        </template>\r\n        <template #item.total_score=\"{ item }\">\r\n          {{ item.total_score + \" / \" + item.total_possible }}\r\n        </template>\r\n        <template #item.region=\"{ item }\">\r\n          {{ findRegion(item.region) }}\r\n        </template>\r\n      </v-data-table>\r\n    </v-card>\r\n  </v-container>\r\n</template>\r\n","import script from \"./LeaderBoard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./LeaderBoard.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { defineStore } from \"pinia\";\r\nimport { reactive } from \"vue\";\r\nimport { supabase } from \"./supabase.js\";\r\nexport const useRegionStore = defineStore(\"region\", () => {\r\n  const regionListData = reactive({\r\n    list: [],\r\n    loading: true,\r\n  });\r\n\r\n  const retrieveRegionList = async () => {\r\n    regionListData.list = [];\r\n    regionListData.loading = true;\r\n    const { data, error } = await supabase.from(\"regions\").select();\r\n    if (data) {\r\n      regionListData.list = data;\r\n      regionListData.loading = false;\r\n    } else {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return {\r\n    regionListData,\r\n    //functions\r\n    retrieveRegionList,\r\n  };\r\n});\r\n"],"names":["useExerciseStore","defineStore","exerciseGroupData","reactive","list","name","id","loading","allExercises","ref","newRunRecording","group_id","exercises","getExerciseGroups","async","data","groupData","supabase","from","select","allOption","sorted","sort","a","b","createSelectableGroupsForNewRun","computed","filter","l","getAllExercises","order","value","useLeaderboardStore","leaderboard","error","fetchLeaderboard","groupId","region","query","eq","includes","ascending","err","message","regionStore","useRegionStore","leaderboardStore","exerciseStore","selectedGroup","selectedRegion","selectedMetric","leaderboardRaw","metricOptions","text","headers","title","loadLeaderboard","filteredLeaderboard","filtered","r","map","entry","index","position","leaderboardUnder5","run_count","leaderboard5Plus","prependedRegionList","regionListData","filteredExerciseGroupList","slice","watch","immediate","findRegion","row","find","onMounted","length","retrieveRegionList","__exports__","console","log"],"sourceRoot":""}